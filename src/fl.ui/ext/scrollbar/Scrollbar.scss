@use "sass:string";
@mixin anchor($name: "ux-scrollbox") { & { anchor-name: --#{$name}; } }

//
@mixin anchor-bind($name: "ux-scrollbox") {
    & {
        position: absolute;
        inline-size: anchor-size(inline, 100%);
        block-size: anchor-size(block, 100%);
        inset-inline-start: anchor(start, 0px);
        inset-block-start: anchor(start, 0px);
    }
}

//
@mixin scroll-tm($source: "", $name: "ux-scrollbox", $axis: "block") {
    & #{$source} { scroll-timeline-axis :   #{$axis}; }
    & #{$source} { scroll-timeline-name : --#{$name}; }
    &                   { timeline-scope: --#{$name}; }
}

//
@mixin scroll-tm-2-axis($source: "", $name: "ux-scrollbox") {
    & #{$source} { scroll-timeline-axis : inline, block; }
    & #{$source} { scroll-timeline-name : --#{$name}-x, --#{$name}-y; }
    &                   { timeline-scope: --#{$name}-x, --#{$name}-y; }
}

//
@mixin view-tm($source: "", $name: "ux-viewbox", $axis: "block") {
    & #{$source} { view-timeline-axis :   #{$axis}; }
    & #{$source} { view-timeline-name : --#{$name}; }
    &                 { timeline-scope: --#{$name}; }
}

//
@function lerp($a, $b, $i: "var(--percent, 0)") { @return calc(#{$a} * #{$i} + #{$b} * (1 - #{$i})); }
@function starts-with ($string, $prefix) { @return string.slice($string, 1, string.length($prefix)) == $prefix; }
@function strip-prefix($string, $prefix) { @if   starts-with($string, $prefix) { @return string.slice($string, string.length($prefix) + 1); }; @return $string; }

//
@mixin with-timeline($timeline: "ux-scrollbox", $name: "percent-coef", $prop: "percent") {
    $is-custom: starts-with($prop, "var("); $strip-prop: strip-prefix($prop, "--");
    $css-prop : if($is-custom, $prop, "--#{$strip-prop}");
    & {
        animation-name: #{$name};
        animation-timeline: --#{$timeline};
        animation-duration: 1ms;
        animation-direction: alternate;
        animation-fill-mode: both;
        animation-timing-function: linear;
    }}

//
@mixin inner-property($name: "percent-coef", $prop: "percent") {
    $is-custom: starts-with($prop, "--"); $strip-prop: strip-prefix($prop, "--");
    $css-prop : if($is-custom, $prop, "--#{$strip-prop}");
    @at-root {
        @if $is-custom { @property --#{$strip-prop} { initial-value: 0; syntax: "<number>"; inherits: true; } }
        @keyframes #{$name} { from { #{$css-prop}: 0.0; }; to { #{$css-prop}: 1.0; }}
    }}

//
$counter: 0;
@mixin timeline-interpol-coef($property: "percent", $timeline: "ux-scrollbox", $name: "percent-coef-A" + $counter) {
    @include inner-property($name, $property);
    @include with-timeline($timeline, $name);
    $counter: $counter+1;
}

//
@position-try --just-block { inset-block-end: 0px; }
@position-try --just-inline { inset-inline-end: 0px; }

//
@include  inner-property("percent-coef-x", "percent-x");
@include  inner-property("percent-coef-y", "percent-y");

// anchor-size(#{$fit}, 100%)
@mixin axis-scrollbar($selector, $fit: "inline", $thumb: ".thumb", $timeline-name: "ux-scrollbox") {
    $cqf: 100cqi; @if $fit == block { $cqb: 100cqb; };
    $inv: block ; @if $fit == block { $inv: inline; };
    $axe: x;    ; @if $fit == block { $axe: y; };

    //
    & :is(#{$selector}[axis="#{$axe}"]) {
        & { #{$inv}-size: 0.5rem; #{$fit}-size: calc(#{$cqf} - 1rem);
            inset-#{$fit}-end  : auto;
            inset-#{$inv}-start: auto;
            inset-#{$fit}-start: 0.5rem;
            inset-#{$inv}-end  : 1px;
            //inset-#{$fit}-start: calc(anchor(--ux-scrollbox start, 0px) + 0.5rem);
            //inset-#{$inv}-end  : calc(anchor(--ux-scrollbox end  , 0px) +    1px);
            //position-try-fallbacks: --just-inline, --just-block;
            //@include timeline-interpol-coef("--percent-#{$axe}", "#{$timeline-name}-#{$axe}");
            @include timeline-interpol-coef("--percent-#{$axe}", "#{$timeline-name}-#{$axe}");
        }

        //
        & :where(#{$thumb})
        {   --max-size: min(100%, calc(#{$cqf} - 1rem)); //
            #{$inv}-size: 100%; #{$fit}-size: min(calc(var(--max-size, 100%) * var(--scroll-coef, 1)), var(--max-size, 100%));
            @if $fit == block
                { translate: 0px calc(100cqb * var(--percent-y, 0) * var(--scroll-coef, 0)) 0px; } @else
                { translate: calc(100cqi * var(--percent-x, 0) * var(--scroll-coef, 0)) 0px 0px; }
        }
    }
}

//
@mixin scrollbar ($selector: ".ui-scrollbar", $anchor: "ux-scrollbox", $thumb: ".ui-thumb") { :where(#{$selector}) {
    & { --fit-unit: calc((var(--content-size, 1) * 1px - 1rem) / var(--content-size, 1)); };
    & { --scroll-coef: 0; }
    & { //
        pointer-events: none;
        touch-action: none;
        user-select: none;

        //
        background-color: transparent !important;
        position-anchor: --#{$anchor};
        container-type: normal;
        writing-mode: horizontal-tb !important;
        line-height: 0px;
        visibility: collapse;
        box-sizing: border-box;
        direction: ltr !important;
        //overflow: hidden;
        position: absolute;
        //position: fixed;
        display: block flow;
        z-index: 9999;
        inset: 0px;
    }

    //
    & :where(#{$thumb}) {
        background-color: oklch(from var(--scrollbar-color, #101010A0) l c h / 0.8) !important;
        position-anchor: --#{$anchor};
        pointer-events: auto;
        border-radius: 0.25rem;
        touch-action: none;
        writing-mode: horizontal-tb !important;
        user-select: none;
        line-height: 0px;
        box-sizing: border-box;
        visibility: auto;
        direction: ltr !important;
        position: relative;
        overflow: hidden;
        display: block flow;
    }
}}

//
@mixin scrollbox($timeline: "ux-scrollbox") {
    & {
        content-visibility: visible !important;
        container-type: size;
        //contain: layout;
        isolation: isolate;
        overflow: hidden;
        pointer-events: auto;
        scrollbar-color: transparent transparent !important;
        scrollbar-width: none !important;
        scrollbar-gutter: auto !important;
        position: static;
        pointer-events: none !important;
        //position: relative;
        //position: fixed !important;
    }
    @include scroll-tm-2-axis("", $timeline);
    @include anchor($timeline);
    @include scrollbar();
    @include anchor-bind();
}
